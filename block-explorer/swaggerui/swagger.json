{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Block explorer for multiple crypto currency",
    "title": "BlockExplorer API",
    "contact": {
      "name": "Faruk TerzioÄŸlu",
      "email": "faruk.terzioglu@hotmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    },
    "version": "1.0.0"
  },
  "basePath": "/v1",
  "paths": {
    "/btc-rpc/block": {
      "get": {
        "tags": [
          "BtcRpc"
        ],
        "summary": "Returns last 10 blocks.",
        "operationId": "getBlocksRpcReq",
        "responses": {
          "200": {
            "$ref": "#/responses/blocksRpcResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/btc-rpc/block/{BlockID}": {
      "get": {
        "description": "If the block id is null, Error Bad Request will be returned.",
        "tags": [
          "BtcRpc"
        ],
        "summary": "Returns a block by id.",
        "operationId": "getBlockRpcReq",
        "parameters": [
          {
            "type": "string",
            "name": "BlockID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/blockRpcResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/btc-rpc/tx/{TxHash}": {
      "get": {
        "description": "If the transaction hash is null, Error Bad Request will be returned.",
        "tags": [
          "BtcRpc"
        ],
        "summary": "Returns a transaction by hash.",
        "operationId": "getTransactionRpcReq",
        "parameters": [
          {
            "type": "string",
            "name": "TxHash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/transactionRpcResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/btc/block": {
      "get": {
        "tags": [
          "Btc"
        ],
        "summary": "Returns last 10 blocks.",
        "operationId": "getBlocksReq",
        "responses": {
          "200": {
            "$ref": "#/responses/blocksResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/btc/block/{BlockID}": {
      "get": {
        "description": "If the block id is null, Error Bad Request will be returned.",
        "tags": [
          "Btc"
        ],
        "summary": "Returns a block by id.",
        "operationId": "getBlockReq",
        "parameters": [
          {
            "type": "string",
            "name": "BlockID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/blockResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    },
    "/btc/tx/{TxHash}": {
      "get": {
        "description": "If the transaction hash is null, Error Bad Request will be returned.",
        "tags": [
          "Btc"
        ],
        "summary": "Returns a transaction by hash.",
        "operationId": "getTransactionReq",
        "parameters": [
          {
            "type": "string",
            "name": "TxHash",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/transactionResp"
          },
          "404": {
            "$ref": "#/responses/notFound"
          },
          "500": {
            "$ref": "#/responses/internal"
          }
        }
      }
    }
  },
  "definitions": {
    "BlockDto": {
      "description": "BlockDto is a DTO for api requests",
      "type": "object",
      "properties": {
        "confirmations": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Confirmations"
        },
        "hash": {
          "type": "string",
          "x-go-name": "Hash"
        },
        "height": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Height"
        },
        "nextblockhash": {
          "type": "string",
          "x-go-name": "NextHash"
        },
        "previousblockhash": {
          "type": "string",
          "x-go-name": "PreviousHash"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Time"
        },
        "tx": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Tx"
        }
      },
      "x-go-package": "github.com/farukterzioglu/btc-scraper/block-explorer/dtos"
    },
    "TransactionDto": {
      "type": "object",
      "properties": {
        "blockhash": {
          "type": "string",
          "x-go-name": "BlockHash"
        },
        "blocktime": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Blocktime"
        },
        "confirmations": {
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Confirmations"
        },
        "hash": {
          "type": "string",
          "x-go-name": "Hash"
        },
        "locktime": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "LockTime"
        },
        "time": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Time"
        },
        "txid": {
          "type": "string",
          "x-go-name": "Txid"
        },
        "version": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Version"
        },
        "vin": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vin"
          },
          "x-go-name": "Vin"
        },
        "vout": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vout"
          },
          "x-go-name": "Vout"
        },
        "vsize": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "Vsize"
        }
      },
      "x-go-package": "github.com/farukterzioglu/btc-scraper/block-explorer/dtos"
    },
    "Vin": {
      "type": "object",
      "properties": {
        "coinbase": {
          "type": "string",
          "x-go-name": "Coinbase"
        },
        "sequence": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Sequence"
        },
        "txid": {
          "type": "string",
          "x-go-name": "Txid"
        },
        "txinwitness": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Witness"
        },
        "vout": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "Vout"
        }
      },
      "x-go-package": "github.com/farukterzioglu/btc-scraper/block-explorer/dtos"
    },
    "Vout": {
      "type": "object",
      "properties": {
        "n": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "N"
        },
        "value": {
          "type": "number",
          "format": "double",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/farukterzioglu/btc-scraper/block-explorer/dtos"
    }
  },
  "responses": {
    "badReq": {
      "description": "Error Bad Request",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 400 - Status Bad Request",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "blockResp": {
      "description": "HTTP status code 200 and a block model in data",
      "schema": {
        "$ref": "#/definitions/BlockDto"
      }
    },
    "blockRpcResp": {
      "description": "HTTP status code 200 and a block model in data",
      "schema": {
        "$ref": "#/definitions/BlockDto"
      }
    },
    "blocksResp": {
      "description": "HTTP status code 200 and an array of block models in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/BlockDto"
        }
      }
    },
    "blocksRpcResp": {
      "description": "HTTP status code 200 and an array of block models in data",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/BlockDto"
        }
      }
    },
    "bool": {
      "description": "Boolean response",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP Status Code 200",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "data": {
            "description": "Boolean true/false",
            "type": "boolean",
            "x-go-name": "Data"
          }
        }
      }
    },
    "conflict": {
      "description": "Error Conflict",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 409 - Conflict",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "forbidden": {
      "description": "Error Forbidden",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 403 - Forbidden",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "internal": {
      "description": "Error Interval Server",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 500 - Internal server error",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "notFound": {
      "description": "Error Not Found",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP status code 404 - Not Found",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          },
          "message": {
            "description": "Detailed error message",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "ok": {
      "description": "Success response",
      "schema": {
        "type": "object",
        "properties": {
          "code": {
            "description": "HTTP Status Code 200",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Code"
          }
        }
      }
    },
    "transactionResp": {
      "description": "HTTP status code 200 and a transaction model in data",
      "schema": {
        "$ref": "#/definitions/TransactionDto"
      }
    },
    "transactionRpcResp": {
      "description": "HTTP status code 200 and a transaction model in data",
      "schema": {
        "$ref": "#/definitions/TransactionDto"
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}